"""
Client example for async tools with sampling (LLM interaction).

cd to the `examples/snippets` directory and run:
    uv run async-sampling-client
"""

import os

import anyio

from mcp import ClientSession, StdioServerParameters, types
from mcp.client.stdio import stdio_client
from mcp.shared.context import RequestContext

# Server parameters for async sampling example
server_params = StdioServerParameters(
    command="uv",
    args=["run", "server", "async_tool_sampling", "stdio"],
    env={"UV_INDEX": os.environ.get("UV_INDEX", "")},
)


async def sampling_callback(
    context: RequestContext[ClientSession, None], params: types.CreateMessageRequestParams
) -> types.CreateMessageResult:
    """Handle sampling requests from the server."""
    print("Server requesting LLM generation...")

    # Simulate LLM response based on the prompt
    response = "Generic simulated LLM response."

    if params.messages and len(params.messages) > 0:
        message = params.messages[0]
        if hasattr(message, "content") and isinstance(message.content, types.TextContent):
            prompt_text = message.content.text

            # Generate different responses based on prompt content
            if "poem" in prompt_text.lower():
                response = "Roses are red, violets are blue,\nThis is a simulated poem for you!"
            elif "story" in prompt_text.lower():
                response = "Once upon a time, in a digital realm, there lived a helpful AI assistant..."
            elif "summary" in prompt_text.lower():
                response = "This is a concise summary of the requested topic, generated by simulation."
            elif "analysis" in prompt_text.lower():
                response = (
                    "Analysis: This topic demonstrates key concepts and relationships that are important to understand."
                )
            else:
                response = "This is a simulated LLM response for testing purposes."

    return types.CreateMessageResult(
        role="assistant",
        content=types.TextContent(type="text", text=response),
        model="test-model",
    )


async def test_content_generation(session: ClientSession):
    """Test content generation with LLM sampling."""
    print("Testing content generation...")

    result = await session.call_tool("generate_content", {"topic": "artificial intelligence", "content_type": "poem"})

    if result.operation:
        token = result.operation.token
        print(f"Content generation started with token: {token}")

        while True:
            status = await session.get_operation_status(token)
            if status.status == "completed":
                final_result = await session.get_operation_result(token)
                for content in final_result.result.content:
                    if isinstance(content, types.TextContent):
                        print(f"Generated content:\n{content.text}")
                break
            elif status.status == "failed":
                print(f"Generation failed: {status.error}")
                break

            await anyio.sleep(0.3)


async def test_multi_step_generation(session: ClientSession):
    """Test multi-step content generation."""
    print("\nTesting multi-step generation...")

    steps = ["write a brief introduction", "explain the main concepts", "provide a conclusion"]

    result = await session.call_tool("multi_step_generation", {"topic": "machine learning", "steps": steps})

    if result.operation:
        token = result.operation.token
        print(f"Multi-step generation started with token: {token}")

        while True:
            status = await session.get_operation_status(token)
            if status.status == "completed":
                final_result = await session.get_operation_result(token)

                if final_result.result.structuredContent:
                    print("Generated content by step:")
                    for step, content in final_result.result.structuredContent.items():
                        print(f"\n{step}:")
                        print(f"  {content}")
                break
            elif status.status == "failed":
                print(f"Multi-step generation failed: {status.error}")
                break

            await anyio.sleep(0.3)


async def run():
    """Run the async sampling client example."""
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write, protocol_version="next", sampling_callback=sampling_callback) as session:
            await session.initialize()

            await test_content_generation(session)
            await test_multi_step_generation(session)

            print("\nSampling examples complete!")


if __name__ == "__main__":
    anyio.run(run)
